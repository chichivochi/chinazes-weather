import os
import logging
import requests
from datetime import time as dtime
from zoneinfo import ZoneInfo
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ---- –õ–û–ì–ò (–≤–∏–¥–Ω–æ –≤ Render) ----
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ---- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ----
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_KEY = os.getenv("OPENWEATHER_API_KEY")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è
TZ = ZoneInfo("Europe/Prague")
SEND_HOUR = 7  # 07:00

# ---- –ü–û–ì–û–î–ê ----
def fetch_weather(city: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–≥–æ–¥–æ–π –∏–ª–∏ None, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    url = "https://api.openweathermap.org/data/2.5/weather"
    params = {"q": city, "appid": WEATHER_KEY, "units": "metric", "lang": "ru"}
    try:
        r = requests.get(url, params=params, timeout=15)
        data = r.json()
        if data.get("cod") != 200:
            return None
        return {
            "name": data["name"],
            "temp": float(data["main"]["temp"]),
            "feels": float(data["main"]["feels_like"]),
            "desc": str(data["weather"][0]["description"]).capitalize(),
        }
    except Exception:
        return None

def clothing_advice(temp: float, feels: float, desc: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–¥–µ–∂–¥–µ."""
    d = desc.lower()
    lines = []

    # –ë–∞–∑–æ–≤–æ –ø–æ –æ—â—É—â–∞–µ–º–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    if feels < -5:
        lines.append("–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ ü•∂: —Ç—ë–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞/–ø—É—Ö–æ–≤–∏–∫, —à–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏, —à–∞—Ä—Ñ.")
    elif feels < 5:
        lines.append("–•–æ–ª–æ–¥–Ω–æ ‚ùÑÔ∏è: —Ç—ë–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞, —à–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏.")
    elif feels < 12:
        lines.append("–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ üß•: –ª—ë–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞/–∫–æ—Ñ—Ç–∞.")
    elif feels < 20:
        lines.append("–£–º–µ—Ä–µ–Ω–Ω–æ üå§: —Ñ—É—Ç–±–æ–ª–∫–∞ + –ª—ë–≥–∫–∞—è –Ω–∞–∫–∏–¥–∫–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é.")
    else:
        lines.append("–¢–µ–ø–ª–æ ‚òÄÔ∏è: –ª—ë–≥–∫–∞—è –æ–¥–µ–∂–¥–∞, –ø–µ–π—Ç–µ –≤–æ–¥—É.")

    # –î–æ–ø. —É—Å–ª–æ–≤–∏—è
    if "–¥–æ–∂–¥" in d or "–º–æ—Ä–æ—Å" in d:
        lines.append("–í–æ–∑—å–º–∏ –∑–æ–Ω—Ç ‚òîÔ∏è –∏–ª–∏ –¥–æ–∂–¥–µ–≤–∏–∫.")
    if "—Å–Ω–µ–≥" in d:
        lines.append("–ù–µ–∑–∞–º–µ–Ω–∏–º–∞ –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –æ–±—É–≤—å –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ üß§.")
    if "–≥—Ä–æ–∑–∞" in d:
        lines.append("–ò–∑–±–µ–≥–∞–π –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏ –≤—ã—Å–æ–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤ üå©.")
    if "–≤–µ—Ç–µ—Ä" in d:
        lines.append("–í–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω–∞—è –∫—É—Ä—Ç–∫–∞ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è üå¨.")

    return "\n".join(lines)

def format_report(city: str) -> str:
    w = fetch_weather(city)
    if not w:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    tips = clothing_advice(w["temp"], w["feels"], w["desc"])
    return (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {w['name']}:\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(w['temp'])}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {round(w['feels'])}¬∞C)\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {w['desc']}\n\n"
        f"üëï –°–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ:\n{tips}"
    )

# ---- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ job_queue ----
def get_saved_city(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> str | None:
    jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    if not jobs:
        return None
    # city —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ job.data
    return jobs[0].data

# ---- –ö–û–ú–ê–ù–î–´ ----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [["/now", "/today", "/setcity Praha"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ –ø–æ–≥–æ–¥—É –∏ –æ–¥–µ–∂–¥—É. "
        "–ó–∞–¥–∞–π –≥–æ—Ä–æ–¥: /setcity <–≥–æ—Ä–æ–¥>\n"
        "–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –ø–æ–º–æ–≥—É—Ç üëá",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )

async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /setcity Praha")
        return
    city = " ".join(context.args)
    chat_id = update.effective_chat.id

    # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –±—ã–ª–∞) –∏ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é
    for j in context.job_queue.get_jobs_by_name(str(chat_id)):
        j.schedule_removal()

    context.job_queue.run_daily(
        callback=send_daily,
        time=dtime(hour=SEND_HOUR, minute=0, tzinfo=TZ),
        chat_id=chat_id,
        data=city,              # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        name=str(chat_id),
        replace_existing=True,
    )
    await update.message.reply_text(
        f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city}\n"
        f"–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {SEND_HOUR:02d}:00 –ø—Ä–∏—à–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Å–æ–≤–µ—Ç—ã."
    )

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    city = get_saved_city(context, chat_id)
    if not city:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –≥–æ—Ä–æ–¥: /setcity <–≥–æ—Ä–æ–¥>")
        return
    await update.message.reply_text(format_report(city))

async def now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∫–æ—Ä–æ—Ç–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî —Ç–æ –∂–µ, —á—Ç–æ /today
    await today(update, context)

# ---- –î–ù–ï–í–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê ----
async def send_daily(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    city = context.job.data
    await context.bot.send_message(chat_id=chat_id, text=format_report(city))

# ---- –ó–ê–ü–£–°–ö ----
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setcity", setcity))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("now", now))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    main()
