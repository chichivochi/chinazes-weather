import os
import logging
import datetime as dt
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from zoneinfo import ZoneInfo

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_API = os.getenv("OPENWEATHER_API_KEY")
TZ = "Europe/Prague"   # —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
SEND_HOUR = 7          # –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
def get_weather(city: str):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API}&units=metric&lang=ru"
    res = requests.get(url).json()
    if res.get("cod") != 200:
        return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    temp = res["main"]["temp"]
    feels = res["main"]["feels_like"]
    desc = res["weather"][0]["description"]

    advice = "üåû –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞."
    if temp < 5:
        advice = "üß• –¢–µ–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞ –∏ —à–∞–ø–∫–∞."
    elif temp < 15:
        advice = "üß• –õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞."
    elif temp < 25:
        advice = "üëï –ö–æ—Ñ—Ç–∞ –∏–ª–∏ —Ñ—É—Ç–±–æ–ª–∫–∞."

    return f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è: {feels}¬∞C\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n–°–æ–≤–µ—Ç: {advice}"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /weather <–≥–æ—Ä–æ–¥>, –∏–ª–∏ /now –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–µ–π—á–∞—Å.")

# –ö–æ–º–∞–Ω–¥–∞ /weather
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥: /weather –ü—Ä–∞–≥–∞")
        return
    city = " ".join(context.args)
    report = get_weather(city)
    await update.message.reply_text(report)

# –ö–æ–º–∞–Ω–¥–∞ /now (–ø—Ä–æ–≥–Ω–æ–∑ —Å–µ–π—á–∞—Å)
async def now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = "Praha"
    report = get_weather(city)
    await update.message.reply_text(report)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ
async def send_daily(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    report = get_weather("Praha")
    await context.bot.send_message(chat_id=chat_id, text=report)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("now", now))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ 7 —É—Ç—Ä–∞
    app.job_queue.run_daily(
        send_daily,
        dt.time(hour=SEND_HOUR, minute=0, tzinfo=ZoneInfo(TZ)),
        chat_id=123456789   # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π chat_id
    )

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    main()
