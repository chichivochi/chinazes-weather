import os
import requests
import datetime as dt
from zoneinfo import ZoneInfo
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_KEY = os.getenv("OPENWEATHER_API_KEY")

# –í –∫–∞–∫–æ–π —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (07:00)
SEND_HOUR = 7
TZ = "Europe/Prague"  # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
user_cities = {}

# ---- —Ñ—É–Ω–∫—Ü–∏–∏ ----
def get_weather(city):
    url = (f"http://api.openweathermap.org/data/2.5/weather?q={city}"
           f"&appid={WEATHER_KEY}&units=metric&lang=ru")
    r = requests.get(url)
    if r.status_code != 200:
        return None
    data = r.json()
    temp = data["main"]["temp"]
    feels = data["main"]["feels_like"]
    desc = data["weather"][0]["description"]
    return temp, feels, desc

def clothing_advice(temp, feels, desc):
    tips = []
    if feels < 0:
        tips.append("–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ ‚ùÑÔ∏è ‚Äî —Ç—ë–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏.")
    elif feels < 10:
        tips.append("–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ üß• ‚Äî –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Ç–æ–ª—Å—Ç–æ–≤–∫–∞.")
    elif feels < 20:
        tips.append("–£–º–µ—Ä–µ–Ω–Ω–æ üå§ ‚Äî –ª—ë–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –∫–æ—Ñ—Ç–∞.")
    else:
        tips.append("–¢–µ–ø–ª–æ üòé ‚Äî —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–ª–∏ –ª—ë–≥–∫–∞—è –æ–¥–µ–∂–¥–∞.")
    if "–¥–æ–∂–¥" in desc.lower() or "–º–æ—Ä–æ—Å" in desc.lower():
        tips.append("–í–æ–∑—å–º–∏ –∑–æ–Ω—Ç ‚òîÔ∏è.")
    if "—Å–Ω–µ–≥" in desc.lower():
        tips.append("–û–±—É–≤—å –¥–ª—è —Å–Ω–µ–≥–∞ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ üß§.")
    return "\n".join(tips)

def get_user_city(user_id):
    return user_cities.get(user_id)

# ---- –∫–æ–º–∞–Ω–¥—ã ----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["/now", "/today", "/setcity Praha"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã üëã\n"
        "–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –≥–æ—Ä–æ–¥: /setcity <–≥–æ—Ä–æ–¥>\n"
        "–ú–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=reply_markup
    )

async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setcity Praha")
        return
    city = " ".join(context.args)
    user_cities[update.effective_user.id] = city
    await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city}")

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = get_user_city(update.effective_user.id)
    if not city:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –≥–æ—Ä–æ–¥: /setcity <–≥–æ—Ä–æ–¥>")
        return
    w = get_weather(city)
    if not w:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üò¢")
        return
    temp, feels, desc = w
    tips = clothing_advice(temp, feels, desc)
    msg = (f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
           f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {feels}¬∞C)\n"
           f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n\n"
           f"üëï –°–æ–≤–µ—Ç—ã:\n{tips}")
    await update.message.reply_text(msg)

async def now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await today(update, context)

# ---- –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ----
async def send_daily(context: ContextTypes.DEFAULT_TYPE):
    for user_id, city in user_cities.items():
        w = get_weather(city)
        if not w:
            continue
        temp, feels, desc = w
        tips = clothing_advice(temp, feels, desc)
        msg = (f"üå§ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ {city}:\n"
               f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {feels}¬∞C)\n"
               f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n\n"
               f"üëï –°–æ–≤–µ—Ç—ã:\n{tips}")
        try:
            await context.bot.send_message(chat_id=user_id, text=msg)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

# ---- –∑–∞–ø—É—Å–∫ ----
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setcity", setcity))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("now", now))

    # –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ 07:00
    job_queue = app.job_queue
    job_queue.run_daily(send_daily, dt.time(hour=SEND_HOUR, minute=0, tzinfo=ZoneInfo(TZ)))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    main()