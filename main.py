import os
import logging
import requests
from datetime import datetime, timedelta, time as dtime
from zoneinfo import ZoneInfo
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)

# ----- –õ–æ–≥–∏ -----
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
log = logging.getLogger("weather-bot")

# ----- –ö–ª—é—á–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -----
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OW_KEY = os.getenv("OPENWEATHER_API_KEY")
TZ = ZoneInfo("Europe/Prague")
SEND_HOUR = 7  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É

# ====== –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======
def clothing_advice(temp: float, feels: float, desc: str) -> str:
    d = desc.lower()
    tips = []
    if feels < -5: tips.append("–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ ü•∂: –ø—É—Ö–æ–≤–∏–∫, —à–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏.")
    elif feels < 5: tips.append("–•–æ–ª–æ–¥–Ω–æ ‚ùÑÔ∏è: —Ç—ë–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞, —à–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏.")
    elif feels < 12: tips.append("–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ üß•: –ª—ë–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞/–∫–æ—Ñ—Ç–∞.")
    elif feels < 20: tips.append("–£–º–µ—Ä–µ–Ω–Ω–æ üå§: —Ñ—É—Ç–±–æ–ª–∫–∞ + –ª—ë–≥–∫–∞—è –Ω–∞–∫–∏–¥–∫–∞.")
    else: tips.append("–¢–µ–ø–ª–æ ‚òÄÔ∏è: –ª—ë–≥–∫–∞—è –æ–¥–µ–∂–¥–∞, –ø–µ–π –≤–æ–¥—É.")
    if "–¥–æ–∂–¥" in d or "–º–æ—Ä–æ—Å" in d: tips.append("–í–æ–∑—å–º–∏ –∑–æ–Ω—Ç ‚òîÔ∏è.")
    if "—Å–Ω–µ–≥" in d: tips.append("–ù–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –æ–±—É–≤—å –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ üß§.")
    if "–≤–µ—Ç–µ—Ä" in d: tips.append("–í–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–∞ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è üå¨.")
    if "–≥—Ä–æ–∑–∞" in d: tips.append("–ò–∑–±–µ–≥–∞–π –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–µ—Å—Ç üå©.")
    return "\n".join(tips)

def format_now(name: str, temp: float, feels: float, desc: str) -> str:
    return (f"üå§ –°–µ–π—á–∞—Å –≤ {name}:\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(temp)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {round(feels)}¬∞C)\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc.capitalize()}\n\n"
            f"üëï –°–æ–≤–µ—Ç—ã:\n{clothing_advice(temp, feels, desc)}")

def format_tomorrow(name: str, tmin: float, tmax: float, desc: str) -> str:
    return (f"üìÖ –ó–∞–≤—Ç—Ä–∞ –≤ {name}:\n"
            f"–ú–∏–Ω/–ú–∞–∫—Å: {round(tmin)}¬∞C / {round(tmax)}¬∞C\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc.capitalize()}\n\n"
            f"üëï –°–æ–≤–µ—Ç—ã:\n{clothing_advice((tmin+tmax)/2, (tmin+tmax)/2, desc)}")

# ====== OpenWeather –∑–∞–ø—Ä–æ—Å—ã ======
def current_by_city(city: str):
    url = "https://api.openweathermap.org/data/2.5/weather"
    p = {"q": city, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    r = requests.get(url, params=p, timeout=15).json()
    if r.get("cod") != 200: return None
    return r["name"], r["main"]["temp"], r["main"]["feels_like"], r["weather"][0]["description"]

def current_by_coords(lat: float, lon: float):
    url = "https://api.openweathermap.org/data/2.5/weather"
    p = {"lat": lat, "lon": lon, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    r = requests.get(url, params=p, timeout=15).json()
    if r.get("cod") != 200: return None
    return r["name"], r["main"]["temp"], r["main"]["feels_like"], r["weather"][0]["description"]

def tomorrow_by_city(city: str):
    # 5-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å —à–∞–≥–æ–º 3 —á–∞—Å–∞
    url = "https://api.openweathermap.org/data/2.5/forecast"
    p = {"q": city, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    r = requests.get(url, params=p, timeout=20).json()
    if r.get("cod") != "200": return None
    name = r["city"]["name"]
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—á–∫–∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –ø–æ UTC –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞
    tomorrow = (datetime.now(ZoneInfo("UTC")) + timedelta(days=1)).date()
    day_points = [i for i in r["list"] if datetime.fromtimestamp(i["dt"], ZoneInfo("UTC")).date() == tomorrow]
    if not day_points: return None
    tmin = min(i["main"]["temp_min"] for i in day_points)
    tmax = max(i["main"]["temp_max"] for i in day_points)
    # –≤–æ–∑—å–º—ë–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–æ—á–∫–∏ –æ–∫–æ–ª–æ –ø–æ–ª—É–¥–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    near12 = min(day_points, key=lambda i: abs(datetime.fromtimestamp(i["dt"], ZoneInfo("UTC")).hour - 12))
    desc = near12["weather"][0]["description"]
    return name, tmin, tmax, desc

def tomorrow_by_coords(lat: float, lon: float):
    url = "https://api.openweathermap.org/data/2.5/forecast"
    p = {"lat": lat, "lon": lon, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    r = requests.get(url, params=p, timeout=20).json()
    if r.get("cod") != "200": return None
    name = r["city"]["name"]
    tomorrow = (datetime.now(ZoneInfo("UTC")) + timedelta(days=1)).date()
    day_points = [i for i in r["list"] if datetime.fromtimestamp(i["dt"], ZoneInfo("UTC")).date() == tomorrow]
    if not day_points: return None
    tmin = min(i["main"]["temp_min"] for i in day_points)
    tmax = max(i["main"]["temp_max"] for i in day_points)
    near12 = min(day_points, key=lambda i: abs(datetime.fromtimestamp(i["dt"], ZoneInfo("UTC")).hour - 12))
    desc = near12["weather"][0]["description"]
    return name, tmin, tmax, desc

# ====== UI –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ======
def main_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        ["today", "tomorrow"],
        ["Praha", KeyboardButton("üìç –ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è", request_location=True)]
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ü—Ä–∞–≥—É
    context.chat_data.setdefault("mode", "city")
    context.chat_data.setdefault("city", "Praha")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: today / tomorrow.\n"
        "–¢—Ä–µ—Ç–∏–π —Ä—è–¥ ‚Äî –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞: Praha –∏–ª–∏ üìç –ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.",
        reply_markup=main_keyboard()
    )

async def on_text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().lower()

    # –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if text == "praha":
        context.chat_data["mode"] = "city"
        context.chat_data["city"] = "Praha"
        await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫: Praha ‚úÖ", reply_markup=main_keyboard())
        return

    # today / tomorrow
    mode = context.chat_data.get("mode", "city")
    if text == "today":
        if mode == "city":
            city = context.chat_data.get("city", "Praha")
            cur = current_by_city(city)
        else:
            coords = context.chat_data.get("coords")
            cur = current_by_coords(*coords) if coords else None
        if not cur:
            await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        name, temp, feels, desc = cur
        await update.message.reply_text(format_now(name, temp, feels, desc), reply_markup=main_keyboard())
        return

    if text == "tomorrow":
        if mode == "city":
            city = context.chat_data.get("city", "Praha")
            tw = tomorrow_by_city(city)
        else:
            coords = context.chat_data.get("coords")
            tw = tomorrow_by_coords(*coords) if coords else None
        if not tw:
            await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        name, tmin, tmax, desc = tw
        await update.message.reply_text(format_tomorrow(name, tmin, tmax, desc), reply_markup=main_keyboard())
        return

    # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –ø–æ–º–æ—â—å
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É: today / tomorrow, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫.", reply_markup=main_keyboard())

async def on_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loc = update.message.location
    if not loc:
        return
    context.chat_data["mode"] = "geo"
    context.chat_data["coords"] = (loc.latitude, loc.longitude)
    await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫: —Ç–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è ‚úÖ", reply_markup=main_keyboard())

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:00, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å
async def send_daily(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    mode = context.job.data.get("mode", "city")
    if mode == "city":
        city = context.job.data.get("city", "Praha")
        cur = current_by_city(city)
        if not cur: return
        name, temp, feels, desc = cur
        await context.bot.send_message(chat_id, format_now(name, temp, feels, desc))
    else:
        coords = context.job.data.get("coords")
        if not coords: return
        cur = current_by_coords(*coords)
        if not cur: return
        name, temp, feels, desc = cur
        await context.bot.send_message(chat_id, format_now(name, temp, feels, desc))

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, on_location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text_buttons))

    # –ø—Ä–∏–º–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –¥–æ–±–∞–≤–ª—è–π –≤—Ä—É—á–Ω—É—é –∏–∑ –∫–æ–¥–∞)
    # app.job_queue.run_daily(send_daily, dtime(hour=SEND_HOUR, minute=0, tzinfo=TZ),
    #                         chat_id=<CHAT_ID>, data={"mode": "city", "city": "Praha"})

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    main()
