import os
import logging
from datetime import datetime, timedelta
from typing import Optional, Tuple
from zoneinfo import ZoneInfo

import requests
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("chinazes-weather")

# ---------- –ö–õ–Æ–ß–ò ----------
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OW_KEY = os.getenv("OPENWEATHER_API_KEY")

# —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è "–∑–∞–≤—Ç—Ä–∞"
TZ = ZoneInfo("Europe/Prague")


# ---------- –°–û–í–ï–¢–´ –ü–û –û–î–ï–ñ–î–ï ----------
def get_clothing_advice(temp_c: float, description: str, wind_speed: float = 0) -> str:
    d = (description or "").lower()
    tips = []

    # –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ (–ø–æ ¬´—Ñ–∞–∫—Ç—É¬ª, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ feels_like –µ—Å–ª–∏ —Ö–æ—á–µ—à—å)
    if temp_c <= 0:
        tips.append("–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ ü•∂. –ó–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞, —à–∞–ø–∫–∞, —à–∞—Ä—Ñ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏.")
    elif 0 < temp_c <= 5:
        tips.append("–•–æ–ª–æ–¥–Ω–æ ‚ùÑÔ∏è. –¢—ë–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞, —à–∞–ø–∫–∞ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏.")
    elif 5 < temp_c <= 15:
        tips.append("–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ üå¨. –ö—É—Ä—Ç–∫–∞ –∏–ª–∏ —Ö—É–¥–∏, –∑–∞–∫—Ä—ã—Ç–∞—è –æ–±—É–≤—å.")
    elif 15 < temp_c <= 25:
        tips.append("–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ üôÇ. –§—É—Ç–±–æ–ª–∫–∞ –∏ –ª—ë–≥–∫–∏–µ –±—Ä—é–∫–∏/–¥–∂–∏–Ω—Å—ã.")
    else:
        tips.append("–ñ–∞—Ä–∫–æ ‚òÄÔ∏è. –õ—ë–≥–∫–∞—è –æ–¥–µ–∂–¥–∞, —à–æ—Ä—Ç—ã, –ø–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã.")

    # –ø–æ –æ—Å–∞–¥–∫–∞–º/–Ω–µ–±—É
    if "–¥–æ–∂–¥" in d or "rain" in d or "–º–æ—Ä–æ—Å" in d:
        tips.append("–í–æ–∑—å–º–∏ –∑–æ–Ω—Ç ‚òîÔ∏è –∏–ª–∏ –¥–æ–∂–¥–µ–≤–∏–∫.")
    if "—Å–Ω–µ–≥" in d or "snow" in d:
        tips.append("–¢—ë–ø–ª–∞—è –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –æ–±—É–≤—å –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ ‚ùÑÔ∏è.")
    if "–≥—Ä–æ–∑–∞" in d or "thunderstorm" in d:
        tips.append("‚õà –ò–∑–±–µ–≥–∞–π –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–µ—Å—Ç –∏ –≤—ã—Å–æ–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤.")
    if "–æ–±–ª–∞" in d or "cloud" in d:
        tips.append("–ü–∞—Å–º—É—Ä–Ω–æ ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –ª—ë–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞.")
    if "—è—Å–Ω–æ" in d or "clear" in d:
        tips.append("–Ø—Å–Ω–æ üåû ‚Äî —Å–æ–ª–Ω–µ—á–Ω—ã–µ –æ—á–∫–∏ –±—É–¥—É—Ç –∫—Å—Ç–∞—Ç–∏.")

    # –ø–æ –≤–µ—Ç—Ä—É
    if wind_speed >= 8:
        tips.append("–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä üí® ‚Äî –Ω–∞–¥–µ–Ω—å –≤–µ—Ç—Ä–æ–≤–∫—É/–∫–∞–ø—é—à–æ–Ω.")

    return " ".join(tips)


def kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["today", "tomorrow"],
            ["Praha", KeyboardButton("üìç –ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è", request_location=True)],
        ],
        resize_keyboard=True,
    )


# ---------- –ó–ê–ü–†–û–°–´ –ö OPENWEATHER ----------
def current_by_city(city: str) -> Optional[Tuple[str, float, float, float, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: name, temp, feels_like, wind_speed, description"""
    url = "https://api.openweathermap.org/data/2.5/weather"
    p = {"q": city, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    try:
        r = requests.get(url, params=p, timeout=15).json()
        if r.get("cod") != 200:
            return None
        return (
            r["name"],
            float(r["main"]["temp"]),
            float(r["main"]["feels_like"]),
            float(r.get("wind", {}).get("speed", 0.0)),
            str(r["weather"][0]["description"]),
        )
    except Exception as e:
        log.exception("current_by_city error: %s", e)
        return None


def current_by_coords(lat: float, lon: float) -> Optional[Tuple[str, float, float, float, str]]:
    url = "https://api.openweathermap.org/data/2.5/weather"
    p = {"lat": lat, "lon": lon, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    try:
        r = requests.get(url, params=p, timeout=15).json()
        if r.get("cod") != 200:
            return None
        return (
            r["name"],
            float(r["main"]["temp"]),
            float(r["main"]["feels_like"]),
            float(r.get("wind", {}).get("speed", 0.0)),
            str(r["weather"][0]["description"]),
        )
    except Exception as e:
        log.exception("current_by_coords error: %s", e)
        return None


def tomorrow_by_city(city: str) -> Optional[Tuple[str, float, float, float, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: name, tmin, tmax, wind_noon, desc_noon"""
    url = "https://api.openweathermap.org/data/2.5/forecast"
    p = {"q": city, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    try:
        r = requests.get(url, params=p, timeout=20).json()
        if r.get("cod") != "200":
            return None
        name = r["city"]["name"]
        target_date = (datetime.now(TZ) + timedelta(days=1)).date()

        pts = [i for i in r["list"] if datetime.fromtimestamp(i["dt"], TZ).date() == target_date]
        if not pts:
            return None

        tmin = min(i["main"]["temp_min"] for i in pts)
        tmax = max(i["main"]["temp_max"] for i in pts)
        # —Ç–æ—á–∫–∞, –±–ª–∏–∂–∞–π—à–∞—è –∫ –ø–æ–ª—É–¥–Ω—é
        near12 = min(pts, key=lambda i: abs(datetime.fromtimestamp(i["dt"], TZ).hour - 12))
        desc = near12["weather"][0]["description"]
        wind = float(near12.get("wind", {}).get("speed", 0.0))

        return name, float(tmin), float(tmax), wind, str(desc)
    except Exception as e:
        log.exception("tomorrow_by_city error: %s", e)
        return None


def tomorrow_by_coords(lat: float, lon: float) -> Optional[Tuple[str, float, float, float, str]]:
    url = "https://api.openweathermap.org/data/2.5/forecast"
    p = {"lat": lat, "lon": lon, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    try:
        r = requests.get(url, params=p, timeout=20).json()
        if r.get("cod") != "200":
            return None
        name = r["city"]["name"]
        target_date = (datetime.now(TZ) + timedelta(days=1)).date()

        pts = [i for i in r["list"] if datetime.fromtimestamp(i["dt"], TZ).date() == target_date]
        if not pts:
            return None

        tmin = min(i["main"]["temp_min"] for i in pts)
        tmax = max(i["main"]["temp_max"] for i in pts)
        near12 = min(pts, key=lambda i: abs(datetime.fromtimestamp(i["dt"], TZ).hour - 12))
        desc = near12["weather"][0]["description"]
        wind = float(near12.get("wind", {}).get("speed", 0.0))

        return name, float(tmin), float(tmax), wind, str(desc)
    except Exception as e:
        log.exception("tomorrow_by_coords error: %s", e)
        return None


# ---------- –§–û–†–ú–ê–¢–´ –û–¢–í–ï–¢–ê ----------
def fmt_now(name: str, temp: float, feels: float, wind: float, desc: str) -> str:
    advice = get_clothing_advice(temp, desc, wind)
    return (
        f"üå§ –°–µ–π—á–∞—Å –≤ {name}:\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(temp)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {round(feels)}¬∞C)\n"
        f"–í–µ—Ç–µ—Ä: {round(wind)} –º/—Å\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc.capitalize()}\n\n"
        f"üëï –°–æ–≤–µ—Ç: {advice}"
    )


def fmt_tomorrow(name: str, tmin: float, tmax: float, wind_noon: float, desc_noon: str) -> str:
    mid = (tmin + tmax) / 2
    advice = get_clothing_advice(mid, desc_noon, wind_noon)
    return (
        f"üìÖ –ó–∞–≤—Ç—Ä–∞ –≤ {name}:\n"
        f"–ú–∏–Ω/–º–∞–∫—Å: {round(tmin)}¬∞C / {round(tmax)}¬∞C\n"
        f"–í–µ—Ç–µ—Ä (–æ–∫–æ–ª–æ –ø–æ–ª—É–¥–Ω—è): {round(wind_noon)} –º/—Å\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc_noon.capitalize()}\n\n"
        f"üëï –°–æ–≤–µ—Ç: {advice}"
    )


# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data.setdefault("mode", "city")   # city | geo
    context.chat_data.setdefault("city", "Praha")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏: today / tomorrow.\n"
        "–ù–∏–∂–µ ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫: Praha –∏–ª–∏ üìç –ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.",
        reply_markup=kb(),
    )


async def cmd_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.chat_data.get("mode", "city")
    if mode == "city":
        city = context.chat_data.get("city", "Praha")
        res = current_by_city(city)
    else:
        coords = context.chat_data.get("coords")
        res = current_by_coords(*coords) if coords else None

    if not res:
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=kb())
        return

    name, temp, feels, wind, desc = res
    await update.message.reply_text(fmt_now(name, temp, feels, wind, desc), reply_markup=kb())


async def cmd_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.chat_data.get("mode", "city")
    if mode == "city":
        city = context.chat_data.get("city", "Praha")
        res = tomorrow_by_city(city)
    else:
        coords = context.chat_data.get("coords")
        res = tomorrow_by_coords(*coords) if coords else None

    if not res:
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.", reply_markup=kb())
        return

    name, tmin, tmax, wind_noon, desc_noon = res
    await update.message.reply_text(fmt_tomorrow(name, tmin, tmax, wind_noon, desc_noon), reply_markup=kb())


async def on_text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().lower()

    if text == "today":
        await cmd_today(update, context)
        return
    if text == "tomorrow":
        await cmd_tomorrow(update, context)
        return
    if text == "praha":
        context.chat_data["mode"] = "city"
        context.chat_data["city"] = "Praha"
        await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫: Praha ‚úÖ", reply_markup=kb())
        return

    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É: today / tomorrow, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∏–∂–µ.", reply_markup=kb())


async def on_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loc = update.message.location
    if not loc:
        return
    context.chat_data["mode"] = "geo"
    context.chat_data["coords"] = (loc.latitude, loc.longitude)
    await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫: —Ç–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è ‚úÖ", reply_markup=kb())


# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
async def post_init(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
        BotCommand("today", "–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å + —Å–æ–≤–µ—Ç—ã"),
        BotCommand("tomorrow", "–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ + —Å–æ–≤–µ—Ç—ã"),
    ])


# ---------- –ó–ê–ü–£–°–ö ----------
def main():
    if not TOKEN or not OW_KEY:
        raise RuntimeError("–ù–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENWEATHER_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("today", cmd_today))
    app.add_handler(CommandHandler("tomorrow", cmd_tomorrow))

    app.add_handler(MessageHandler(filters.LOCATION, on_location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text_buttons))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()


if __name__ == "__main__":
    main()
