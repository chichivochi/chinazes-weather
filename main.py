import os
import datetime as dt
import requests
from zoneinfo import ZoneInfo
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_KEY = os.getenv("OPENWEATHER_API_KEY")
TZ = "Europe/Prague"
SEND_HOUR = 7

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã ---
def get_weather(city: str) -> str:
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_KEY}&units=metric&lang=ru"
    res = requests.get(url).json()

    if res.get("cod") != 200:
        return "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    temp = res["main"]["temp"]
    feels = res["main"]["feels_like"]
    desc = res["weather"][0]["description"].capitalize()

    # —Å–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µ
    if temp < 0:
        advice = "–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ üß• –ù–∞–¥–µ–Ω—å —Ç—ë–ø–ª—É—é –∫—É—Ä—Ç–∫—É –∏ —à–∞–ø–∫—É."
    elif temp < 10:
        advice = "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ üß£ –†–µ–∫–æ–º–µ–Ω–¥—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä."
    elif temp < 20:
        advice = "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ üëï –ü–æ–¥–æ–π–¥—ë—Ç –ª—ë–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Ö—É–¥–∏."
    else:
        advice = "–¢–µ–ø–ª–æ ‚òÄÔ∏è –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç —Ñ—É—Ç–±–æ–ª–∫–∞."

    return f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {feels}¬∞C)\n{desc}\nüëï –°–æ–≤–µ—Ç: {advice}"

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /weather <–≥–æ—Ä–æ–¥> –∏–ª–∏ /now <–≥–æ—Ä–æ–¥>.")

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather Praha")
        return
    city = " ".join(context.args)
    await update.message.reply_text(get_weather(city))

async def now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /now Praha")
        return
    city = " ".join(context.args)
    await update.message.reply_text(get_weather(city))

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7 —É—Ç—Ä–∞ ---
async def send_daily(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    city = context.job.data
    await context.bot.send_message(chat_id=chat_id, text=get_weather(city))

async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setcity Praha")
        return
    city = " ".join(context.args)
    chat_id = update.effective_chat.id
    # –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    context.job_queue.run_daily(
        send_daily,
        time=dt.time(hour=SEND_HOUR, minute=0, tzinfo=ZoneInfo(TZ)),
        chat_id=chat_id,
        data=city,
        name=str(chat_id),
        replace_existing=True,
    )
    await update.message.reply_text(f"‚úÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {SEND_HOUR}:00 —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}.")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("now", now))
    app.add_handler(CommandHandler("setcity", setcity))

    app.run_polling()

if __name__ == "__main__":
    main()
