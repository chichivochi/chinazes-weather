import os
import logging
import requests
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from typing import Optional, Tuple

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ------------ –õ–û–ì–ò ------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("weather-bot")

# ------------ –ö–õ–Æ–ß–ò/–ù–ê–°–¢–†–û–ô–ö–ò ------------
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OW_KEY = os.getenv("OPENWEATHER_API_KEY")
TZ = ZoneInfo("Europe/Prague")  # –¥–ª—è ¬´–∑–∞–≤—Ç—Ä–∞¬ª –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ============
def clothing_advice(temp: float, feels: float, desc: str) -> str:
    """–°–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –æ –¥–æ–∂–¥–µ/—Å–Ω–µ–≥–µ/–≤–µ—Ç—Ä–µ/–≥—Ä–æ–∑–µ."""
    d = desc.lower()
    tips = []

    # –ø–æ ¬´–æ—â—É—â–∞–µ—Ç—Å—è¬ª
    if feels < -5:
        tips.append("–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ ü•∂: —Ç—ë–ø–ª—ã–π –ø—É—Ö–æ–≤–∏–∫, —à–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏, —à–∞—Ä—Ñ.")
    elif feels < 5:
        tips.append("–•–æ–ª–æ–¥–Ω–æ ‚ùÑÔ∏è: —Ç—ë–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞, —à–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏.")
    elif feels < 12:
        tips.append("–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ üß•: –ª—ë–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞/–∫–æ—Ñ—Ç–∞.")
    elif feels < 20:
        tips.append("–£–º–µ—Ä–µ–Ω–Ω–æ üå§: —Ñ—É—Ç–±–æ–ª–∫–∞ + –ª—ë–≥–∫–∞—è –Ω–∞–∫–∏–¥–∫–∞.")
    else:
        tips.append("–¢–µ–ø–ª–æ ‚òÄÔ∏è: –ª—ë–≥–∫–∞—è –æ–¥–µ–∂–¥–∞, –ø–µ–π –≤–æ–¥—É.")

    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if ("rain" in d) or ("–¥–æ–∂–¥" in d) or ("–º–æ—Ä–æ—Å" in d):
        tips.append("üåß –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å ‚Äî –≤–æ–∑—å–º–∏ –∑–æ–Ω—Ç –∏–ª–∏ –¥–æ–∂–¥–µ–≤–∏–∫.")
    if "snow" in d or "—Å–Ω–µ–≥" in d:
        tips.append("‚ùÑ –í–æ–∑–º–æ–∂–µ–Ω —Å–Ω–µ–≥ ‚Äî —Ç—ë–ø–ª–∞—è –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –æ–±—É–≤—å –∏ –ø–µ—Ä—á–∞—Ç–∫–∏.")
    if "thunderstorm" in d or "–≥—Ä–æ–∑–∞" in d:
        tips.append("‚õà –ì—Ä–æ–∑–∞ ‚Äî –∏–∑–±–µ–≥–∞–π –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–µ—Å—Ç –∏ –≤—ã—Å–æ—Ç–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤.")
    if "wind" in d or "–≤–µ—Ç–µ—Ä" in d:
        tips.append("üí® –í–µ—Ç—Ä–µ–Ω–æ ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω–∞—è –∫—É—Ä—Ç–∫–∞/–∫–∞–ø—é—à–æ–Ω.")

    return "\n".join(tips)


def kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["today", "tomorrow"],
            ["Praha", KeyboardButton("üìç –ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è", request_location=True)],
        ],
        resize_keyboard=True,
    )


# ============ OPENWEATHER ============

def current_by_city(city: str) -> Optional[Tuple[str, float, float, str]]:
    url = "https://api.openweathermap.org/data/2.5/weather"
    p = {"q": city, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    try:
        r = requests.get(url, params=p, timeout=15).json()
        if r.get("cod") != 200:
            return None
        return (
            r["name"],
            float(r["main"]["temp"]),
            float(r["main"]["feels_like"]),
            str(r["weather"][0]["description"]),
        )
    except Exception as e:
        log.exception("current_by_city error: %s", e)
        return None


def current_by_coords(lat: float, lon: float) -> Optional[Tuple[str, float, float, str]]:
    url = "https://api.openweathermap.org/data/2.5/weather"
    p = {"lat": lat, "lon": lon, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    try:
        r = requests.get(url, params=p, timeout=15).json()
        if r.get("cod") != 200:
            return None
        return (
            r["name"],
            float(r["main"]["temp"]),
            float(r["main"]["feels_like"]),
            str(r["weather"][0]["description"]),
        )
    except Exception as e:
        log.exception("current_by_coords error: %s", e)
        return None


def tomorrow_by_city(city: str) -> Optional[Tuple[str, float, float, str]]:
    """–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: –º–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫–æ–ª–æ –ø–æ–ª—É–¥–Ω—è."""
    url = "https://api.openweathermap.org/data/2.5/forecast"
    p = {"q": city, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    try:
        r = requests.get(url, params=p, timeout=20).json()
        if r.get("cod") != "200":
            return None
        name = r["city"]["name"]
        target_date = (datetime.now(TZ) + timedelta(days=1)).date()
        pts = [i for i in r["list"] if datetime.fromtimestamp(i["dt"], TZ).date() == target_date]
        if not pts:
            return None
        tmin = min(i["main"]["temp_min"] for i in pts)
        tmax = max(i["main"]["temp_max"] for i in pts)
        near12 = min(pts, key=lambda i: abs(datetime.fromtimestamp(i["dt"], TZ).hour - 12))
        desc = near12["weather"][0]["description"]
        return name, float(tmin), float(tmax), str(desc)
    except Exception as e:
        log.exception("tomorrow_by_city error: %s", e)
        return None


def tomorrow_by_coords(lat: float, lon: float) -> Optional[Tuple[str, float, float, str]]:
    url = "https://api.openweathermap.org/data/2.5/forecast"
    p = {"lat": lat, "lon": lon, "appid": OW_KEY, "units": "metric", "lang": "ru"}
    try:
        r = requests.get(url, params=p, timeout=20).json()
        if r.get("cod") != "200":
            return None
        name = r["city"]["name"]
        target_date = (datetime.now(TZ) + timedelta(days=1)).date()
        pts = [i for i in r["list"] if datetime.fromtimestamp(i["dt"], TZ).date() == target_date]
        if not pts:
            return None
        tmin = min(i["main"]["temp_min"] for i in pts)
        tmax = max(i["main"]["temp_max"] for i in pts)
        near12 = min(pts, key=lambda i: abs(datetime.fromtimestamp(i["dt"], TZ).hour - 12))
        desc = near12["weather"][0]["description"]
        return name, float(tmin), float(tmax), str(desc)
    except Exception as e:
        log.exception("tomorrow_by_coords error: %s", e)
        return None


# ============ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï ============
def format_now(name: str, temp: float, feels: float, desc: str) -> str:
    return (
        f"üå§ –°–µ–π—á–∞—Å –≤ {name}:\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(temp)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {round(feels)}¬∞C)\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc.capitalize()}\n\n"
        f"üëï –°–æ–≤–µ—Ç—ã:\n{clothing_advice(temp, feels, desc)}"
    )


def format_tomorrow(name: str, tmin: float, tmax: float, desc: str) -> str:
    mid = (tmin + tmax) / 2
    return (
        f"üìÖ –ó–∞–≤—Ç—Ä–∞ –≤ {name}:\n"
        f"–ú–∏–Ω/–ú–∞–∫—Å: {round(tmin)}¬∞C / {round(tmax)}¬∞C\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc.capitalize()}\n\n"
        f"üëï –°–æ–≤–µ—Ç—ã:\n{clothing_advice(mid, mid, desc)}"
    )


# ============ –•–≠–ù–î–õ–ï–†–´ ============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data.setdefault("mode", "city")   # city|geo
    context.chat_data.setdefault("city", "Praha")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏: today / tomorrow.\n"
        "–ù–∏–∂–µ ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫: Praha –∏–ª–∏ üìç –ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.",
        reply_markup=kb(),
    )


async def cmd_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.chat_data.get("mode", "city")
    if mode == "city":
        city = context.chat_data.get("city", "Praha")
        cur = current_by_city(city)
    else:
        coords = context.chat_data.get("coords")
        cur = current_by_coords(*coords) if coords else None

    if not cur:
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=kb())
        return

    name, temp, feels, desc = cur
    await update.message.reply_text(format_now(name, temp, feels, desc), reply_markup=kb())


async def cmd_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.chat_data.get("mode", "city")
    if mode == "city":
        city = context.chat_data.get("city", "Praha")
        tw = tomorrow_by_city(city)
    else:
        coords = context.chat_data.get("coords")
        tw = tomorrow_by_coords(*coords) if coords else None

    if not tw:
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=kb())
        return

    name, tmin, tmax, desc = tw
    await update.message.reply_text(format_tomorrow(name, tmin, tmax, desc), reply_markup=kb())


async def on_text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().lower()

    if text == "today":
        await cmd_today(update, context)
        return
    if text == "tomorrow":
        await cmd_tomorrow(update, context)
        return
    if text == "praha":
        context.chat_data["mode"] = "city"
        context.chat_data["city"] = "Praha"
        await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫: Praha ‚úÖ", reply_markup=kb())
        return

    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É: today / tomorrow, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∏–∂–µ.", reply_markup=kb())


async def on_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loc = update.message.location
    if not loc:
        return
    context.chat_data["mode"] = "geo"
    context.chat_data["coords"] = (loc.latitude, loc.longitude)
    await update.message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫: —Ç–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è ‚úÖ", reply_markup=kb())


# –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
async def post_init(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
        BotCommand("today", "–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å + —Å–æ–≤–µ—Ç—ã"),
        BotCommand("tomorrow", "–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ + —Å–æ–≤–µ—Ç—ã"),
    ])


# ============ –ó–ê–ü–£–°–ö ============
def main():
    app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("today", cmd_today))
    app.add_handler(CommandHandler("tomorrow", cmd_tomorrow))

    app.add_handler(MessageHandler(filters.LOCATION, on_location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text_buttons))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()


if __name__ == "__main__":
    main()
